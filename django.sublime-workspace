{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"po",
				"poss_actions_list"
			],
			[
				"para",
				"params"
			],
			[
				"cwac",
				"clockwise_action"
			]
		]
	},
	"buffers":
	[
		{
			"file": "docker-compose-laptop.yml",
			"settings":
			{
				"buffer_size": 2886,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Dockerfile",
			"settings":
			{
				"buffer_size": 643,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "requirements.txt",
			"settings":
			{
				"buffer_size": 128,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "filepopulator/apps.py",
			"settings":
			{
				"buffer_size": 101,
				"line_ending": "Unix"
			}
		},
		{
			"file": "taggerProject/wsgi.py",
			"settings":
			{
				"buffer_size": 404,
				"line_ending": "Unix"
			}
		},
		{
			"file": "taggerProject/celery.py",
			"settings":
			{
				"buffer_size": 1616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "filepopulator/tasks.py",
			"settings":
			{
				"buffer_size": 1363,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "taggerProject/__init__.py",
			"settings":
			{
				"buffer_size": 261,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "filepopulator/jpg_extractor.py",
			"settings":
			{
				"buffer_size": 7482,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/picasa/settings.py",
			"settings":
			{
				"buffer_size": 5007,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django import forms\nfrom django.conf import settings\nimport os\nimport binascii\nfrom textwrap import wrap # for splitting string\nimport os\nimport shutil\nimport numpy as np\nimport imageio\nimport time\n\n# Create your tests here.\n\nfrom .models import ImageFile, Directory\nfrom .forms import ImageFileForm, DirectoryForm\nfrom .views import create_or_get_directory, create_image_file, add_from_root_dir\n\nimport logging\n\nlogging.basicConfig(level=settings.LOG_LEVEL)\n\nclass ImageFileTests(TestCase):\n\n    def setUp(self):\n\n        self.validation_dir = settings.FILEPOPULATOR_VAL_DIRECTORY # '/validation_imgs'\n        # self.val_train = os.path.join(self.val_img_prefix, 'train')\n        # self.val_test = os.path.join(self.val_img_prefix, 'test')\n\n        assert os.path.isdir(self.validation_dir), 'Validation directory in ImageFileTests does not exist.'\n        # assert os.path.isdir(self.val_train), 'val_train directory in ImageFileTests does not exist.'\n        # assert os.path.isdir(self.val_test), 'val_test directory in ImageFileTests does not exist.'\n\n        self.tmp_valid_dir = '/tmp/img_validation'\n\n        if os.path.exists(self.tmp_valid_dir):\n            shutil.rmtree(self.tmp_valid_dir)\n\n        shutil.copytree(self.validation_dir, self.tmp_valid_dir)\n\n        self.test_dir = os.path.join(self.tmp_valid_dir, 'naming')\n        self.good_dir = os.path.join(self.test_dir, 'good')\n        self.bad_dir = os.path.join(self.test_dir, 'bad')\n\n        self.goodFiles = []\n        self.badFiles = []\n\n        for root, dirs, files in os.walk(self.good_dir):\n            for fname in files:\n                self.goodFiles.append(os.path.join(root, fname) )\n\n        # List of files that exist but that don't meet the file extension properties.\n        for root, dirs, files in os.walk(self.bad_dir):\n            for fname in files:\n                self.badFiles.append(os.path.join(root, fname) )\n            \n        # Add file paths that don't exist.\n        self.badFiles.append(os.path.join(self.tmp_valid_dir, 'asdf.png'))\n        self.badFiles.append(os.path.join('aaa', 'a.png'))\n        self.badFiles.append(os.path.join('/images2', 'b.jpg'))\n        self.badFiles.append(os.path.join('aaa', 'a.jpg'))\n        self.badFiles.append(os.path.join('aaa', 'a.jpg.txt'))\n\n    # def test_dir_create(self):\n    #     key = create_or_get_directory(self.val_train)\n    #     key2 = create_or_get_directory(self.val_train)\n    #     key3 = create_or_get_directory(self.val_test)\n    #     self.assertIs(key == key2, True)\n    #     self.assertIs(key == key3, False)\n\n    def test_same_pixel_hash(self):\n\n        # Two different strings (d55 vs 555) that give the same hash \n        str1_pre = '4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa' + \\\n            '200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2'\n        str2_pre = '4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa' + \\\n            '202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2'\n\n        mutual_len = 12000 - len(str1_pre)\n        mutual = str(binascii.b2a_hex(os.urandom(int(mutual_len // 2))))\n        mutual = mutual[2:-1]\n\n        str1 = str1_pre + mutual\n        str2 = str2_pre + mutual[:-2] + 'cc'\n\n        def str_to_numpy(string):\n            assert len(string) == 12000\n            spl = [int(x, 16) for x in wrap(string, 2)]\n            arr = np.array(spl, dtype=np.uint8)\n            arr = arr.reshape(50, 40, 3)\n            return arr\n\n        array1 = str_to_numpy(str1)\n        array2 = str_to_numpy(str2)\n\n        file1 = os.path.join(self.tmp_valid_dir, 'outfile1.jpg')\n        file2 = os.path.join(self.tmp_valid_dir, 'outfile2.jpg')\n        imageio.imsave('outfile1.png', array1[:, :, (2, 1, 0)])\n        imageio.imsave('outfile2.png', array2[:, :, (2, 1, 0)])\n        shutil.move('outfile1.png', file1)\n        shutil.move('outfile2.png', file2)\n\n        create_image_file(file1)\n        create_image_file(file2)\n        allObjects = ImageFile.objects.all()\n\n        self.assertEqual(len(allObjects), 2, \"The two image files should be same hash but two different instances in DB.\")\n        self.assertEqual(allObjects[0].pixel_hash, allObjects[1].pixel_hash )\n        self.assertTrue(os.path.isfile(allObjects[0].thumbnail.name))\n        self.assertTrue(os.path.isfile(allObjects[1].thumbnail.name))\n\n        os.remove(file1)\n        os.remove(file2)\n\n        # self.assertTrue(False) # Need work on this test.\n\n    def tearDown(self):\n        # Clean up the thumbnails\n        allObjects = ImageFile.objects.all()\n        for obj in allObjects:\n            obj.thumbnail.delete()\n            obj.delete()\n\n        shutil.rmtree(self.tmp_valid_dir)\n\n    def test_file_names(self):\n        \n        for good in self.goodFiles:\n            create_image_file(good) #, -3, 3, self.dir_prefix)\n\n        for bad in self.badFiles:\n\n            create_image_file(bad) \n\n        allObjects = ImageFile.objects.all()\n        allFiles = []\n        for num in range(len(allObjects) ):\n            fullname = allObjects[num].filename\n            self.assertTrue(os.path.isfile(allObjects[num].thumbnail.name))\n            self.assertTrue(allObjects[num].filename in self.goodFiles)\n            allFiles.append(fullname)\n\n        logging.debug(\"All files in test_file_names is: {}\".format(allFiles))\n\n        for eachGood in self.goodFiles:\n            # print(eachGood)\n            self.assertTrue(eachGood in allFiles, 'File {} has a name that is valid but Django thinks is not.'.format(eachGood) )\n\n        for eachBad in self.badFiles:\n            # print(eachBad)\n            self.assertFalse(eachBad in allFiles, 'File {} has a name that Django thinks is valid but is not.'.format(eachGood))\n\n        dirs = Directory.objects.all()\n        self.assertEqual(dirs.count(), 2) # That's how many there are currently. \n\n    def test_image_path_changes(self):\n\n        file_orig = self.goodFiles[0]\n        create_image_file(file_orig)\n        new_path = os.path.join(self.tmp_valid_dir, 'tmpmv.jpg')\n        shutil.move(file_orig, new_path )\n        create_image_file(new_path)\n\n        orig_ref = ImageFile.objects.filter(filename = file_orig)\n        new_ref = ImageFile.objects.filter(filename = new_path)\n\n        shutil.move(new_path, file_orig)\n\n        self.assertEqual(orig_ref.count(), 0)\n        self.assertEqual(new_ref.count(), 1)\n\n    def test_image_pixels_change(self):\n        file1 = self.goodFiles[0]\n        dest_file = os.path.join(self.tmp_valid_dir, 'tmpmv.jpg')\n        shutil.copy(file1, dest_file)\n        create_image_file(dest_file)\n        first_item = ImageFile.objects.filter(filename=dest_file)\n        thumbnail1 = first_item[0].thumbnail.name\n        self.assertTrue(os.path.isfile(thumbnail1))\n\n        file2 = self.goodFiles[1]\n        shutil.copy(file2, dest_file)\n        create_image_file(dest_file)\n        second_item = ImageFile.objects.filter(filename=dest_file)\n        thumbnail2 = second_item[0].thumbnail.name\n\n        self.assertFalse(os.path.isfile(thumbnail1))\n        self.assertTrue(os.path.isfile(thumbnail2))\n\n    def test_same_picture_two_paths(self):\n        src_file = self.goodFiles[0]\n        path1 = os.path.join(self.tmp_valid_dir, 'tmp1.jpg')\n        shutil.copy(src_file, path1)\n        path2 = os.path.join(self.tmp_valid_dir, 'tmp2.jpg')\n        shutil.copy(src_file, path2)\n        create_image_file(path1)\n        create_image_file(path2)\n\n\n        first_item = ImageFile.objects.filter(filename=path1)\n        self.assertEqual(len(first_item), 1)\n        pixel_hash = first_item[0].pixel_hash\n        second_item = ImageFile.objects.filter(filename=path2)\n        self.assertEqual(len(second_item), 1)\n        pixel_hash2 = second_item[0].pixel_hash\n\n        self.assertNotEqual(path1, path2)\n        self.assertEqual(pixel_hash, pixel_hash2)\n        self.assertTrue(os.path.isfile(first_item[0].thumbnail.name))\n        self.assertTrue(os.path.isfile(second_item[0].thumbnail.name))\n\n\n    def test_move_id_stay_same(self):\n        src_file = self.goodFiles[0]\n        create_image_file(src_file)\n        path1 = os.path.join(self.tmp_valid_dir, 'tmp1.jpg')\n        first_item = ImageFile.objects.filter(filename=src_file)\n        ident1 = first_item[0].id\n        ph = first_item[0].pixel_hash\n        shutil.move(src_file, path1)\n        create_image_file(path1)\n        second_item = ImageFile.objects.filter(filename=path1)\n        ident2 = second_item[0].id\n        self.assertEqual(ident1, ident2)\n\n        # Have two of same input -- how can I figure out which moved?\n        path2 = os.path.join(self.tmp_valid_dir, 'tmp2.jpg')\n        path3 = os.path.join(self.tmp_valid_dir, 'tmp3.jpg')\n        shutil.copy(path1, path2)\n        create_image_file(path2)\n        # 1 and 2 in database\n        shutil.move(path2, path3)\n        create_image_file(path3)\n        # 3 should replace 2\n        items = ImageFile.objects.all()\n        item_files = [x.filename for x in items]\n        # print(item_files)\n        self.assertEqual(set(item_files), set([path1, path3]))\n\n    # Tested adding bad file names? Not there?\n\n    def test_multiple_inputs(self):\n        # Test to see that adding a file again does not create a duplicate file.\n        goodFile = self.goodFiles[0]\n        create_image_file(goodFile)\n        create_image_file(goodFile)\n        # print(goodFile)\n        num_goodfiles = ImageFile.objects.filter(filename = goodFile).count()\n        self.assertEqual(num_goodfiles, 1)\n\n    def test_bulk_add(self):\n        add_from_root_dir(self.tmp_valid_dir)\n\n        valid_files = []\n\n        for root, dirs, files in os.walk(self.tmp_valid_dir):\n            for f in files:\n                cur_file = os.path.join(root, f)\n                if cur_file.lower().endswith( ('.jpg', '.jpeg',`) ):\n                    valid_files.append(cur_file)\n\n        files_in_db = ImageFile.objects.all()\n        \n        raise NotImplementedError('Not finished with this test -- need to validate.')\n\n    def test_metadata_gps(self):\n        # raise NotImplementedError('GPS Test')\n        # Make sure at least one image has GPS data. \n\n        for root, dirs, files in os.walk(self.tmp_valid_dir):\n            for fname in files:\n                create_image_file( os.path.join(root, fname) )\n\n        db_objects = ImageFile.objects.all()\n\n        gps_lats = []\n        gps_lons = []\n\n        for obj in db_objects:\n            gps_lats.append(obj.gps_lat_decimal)\n            gps_lons.append(obj.gps_lon_decimal)\n\n        lat_valid_set = set(gps_lats)\n        lon_valid_set = set(gps_lons)\n\n        # Assert that there is more than the default value for fields with \n        # latitude and longitude. \n        self.assertTrue(len(lat_valid_set) > 1)\n        self.assertTrue(len(lon_valid_set) > 1)\n\n        # Same test a different way: -999 is the default value.\n        lat_valid_set -= set([-999])\n        lon_valid_set -= set([-999])\n\n        self.assertTrue(len(lat_valid_set) > 0)\n        self.assertTrue(len(lon_valid_set) > 0)\n\n\n    def test_exif_metadata(self):\n        raise NotImplementedError('Metadata test')",
			"file": "/home/benjamin/git_repos/local_picasa/filepopulator/tests.py",
			"file_size": 11215,
			"file_write_time": 132138012961320531,
			"settings":
			{
				"buffer_size": 11217,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/filepopulator/models.py",
			"settings":
			{
				"buffer_size": 16075,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/filepopulator/views.py",
			"settings":
			{
				"buffer_size": 5210,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "dict_keys(['ImageWidth', 'ImageLength', 'BitsPerSample', 'Compression', 'PhotometricInterpretation', 'Make', 'Model', 'Orientation', 'SamplesPerPixel', 'XResolution', 'YResolution', 'PlanarConfiguration', 'ResolutionUnit', 'ExifOffset', 'Software', 'DateTime', 'ExifVersion', 'FlashPixVersion', 'ColorSpace', 'DateTimeOriginal', 'DateTimeDigitized', 'ExposureBiasValue', 'MaxApertureValue', 'MeteringMode', 'LightSource', 'Flash', 'FocalLength', 'UserComment', 'ExifImageWidth', 'DigitalZoomRatio', 'FocalLengthIn35mmFilm', 'SceneCaptureType', 'SubsecTime', 'SubsecTimeOriginal', 'SubsecTimeDigitized', 'ExifImageHeight', 'SubjectDistanceRange', 'SensingMethod', 'FileSource', 'ExposureTime', 'FNumber', 'SceneType', 'ExposureProgram', 'CFAPattern', 'CustomRendered', 'ISOSpeedRatings', 'ExposureMode', 'WhiteBalance', 'GainControl', 'Contrast', 'Saturation', 'Sharpness'])\ndict_keys(['Software', 'Orientation', 'DateTime', 'ResolutionUnit', 'ExifOffset', 'XResolution', 'YResolution', 'ColorSpace', 'ExifImageWidth', 'ExifImageHeight'])\ndict_keys(['Software', 'Orientation', 'DateTime', 'ResolutionUnit', 'ExifOffset', 'XResolution', 'YResolution', 'ColorSpace', 'ExifImageWidth', 'ExifImageHeight'])\ndict_keys(['ResolutionUnit', 'ExifOffset', 'Make', 'Model', 'Software', 'Orientation', 'DateTime', 'YCbCrPositioning', 'ImageHistory', 'XResolution', 'YResolution', 'ExifVersion', 'ComponentsConfiguration', 'CompressedBitsPerPixel', 'DateTimeOriginal', 'DateTimeDigitized', 'ExposureBiasValue', 'MaxApertureValue', 'MeteringMode', 'LightSource', 'Flash', 'FocalLength', 'UserComment', 'ColorSpace', 'ExifImageWidth', 'ExifInteroperabilityOffset', 'SceneCaptureType', 'SubsecTime', 'SubsecTimeOriginal', 'SubsecTimeDigitized', 'ExifImageHeight', 'SubjectDistanceRange', 'SensingMethod', 'FileSource', 'ExposureTime', 'FNumber', 'SceneType', 'ExposureProgram', 'CFAPattern', 'CustomRendered', 'ISOSpeedRatings', 'ExposureMode', 'FlashPixVersion', 'WhiteBalance', 'DigitalZoomRatio', 'FocalLengthIn35mmFilm', 'GainControl', 'Contrast', 'Saturation', 'Sharpness', 'MakerNote'])\ndict_keys(['ResolutionUnit', 'ExifOffset', 'Make', 'Model', 'Software', 'Orientation', 'DateTime', 'YCbCrPositioning', 'ImageHistory', 'XResolution', 'YResolution', 'ExifVersion', 'ComponentsConfiguration', 'CompressedBitsPerPixel', 'DateTimeOriginal', 'DateTimeDigitized', 'ExposureBiasValue', 'MaxApertureValue', 'MeteringMode', 'LightSource', 'Flash', 'FocalLength', 'UserComment', 'ColorSpace', 'ExifImageWidth', 'ExifInteroperabilityOffset', 'SceneCaptureType', 'SubsecTime', 'SubsecTimeOriginal', 'SubsecTimeDigitized', 'ExifImageHeight', 'SubjectDistanceRange', 'SensingMethod', 'FileSource', 'ExposureTime', 'FNumber', 'SceneType', 'ExposureProgram', 'CFAPattern', 'CustomRendered', 'ISOSpeedRatings', 'ExposureMode', 'FlashPixVersion', 'WhiteBalance', 'DigitalZoomRatio', 'FocalLengthIn35mmFilm', 'GainControl', 'Contrast', 'Saturation', 'Sharpness', 'MakerNote'])\n",
			"settings":
			{
				"buffer_size": 2950,
				"line_ending": "Unix",
				"name": "dict_keys(['ImageWidth', 'ImageLength', 'BitsPerSa"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/testing/test_hash_collision.py",
			"settings":
			{
				"buffer_size": 2984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/benjamin/Desktop/talks_2019.txt",
			"settings":
			{
				"buffer_size": 355,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "docker container run --help : this is good to know.",
			"settings":
			{
				"buffer_size": 51,
				"line_ending": "Unix",
				"name": "docker container run --help : this is good to know"
			}
		},
		{
			"file": "/home/benjamin/Desktop/birthday_invite.txt",
			"settings":
			{
				"buffer_size": 387,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "Nathaniel Birthday Party (Best party in town)"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/periodic/tasks.py",
			"settings":
			{
				"buffer_size": 612,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/steps.txt",
			"settings":
			{
				"buffer_size": 3603,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/benjamin/git_repos/local_picasa/filepopulator/README.rst",
			"settings":
			{
				"buffer_size": 1425,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from __future__ import absolute_import\nimport os\nfrom celery import Celery\nfrom django.conf import settings\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'picasa.settings')\napp = Celery('picasa')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))",
			"file": "/home/benjamin/git_repos/local_picasa/periodic/celery.py",
			"file_size": 559,
			"file_write_time": 132102096462489084,
			"settings":
			{
				"buffer_size": 559,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"syntax: text",
				"Set Syntax: Plain Text"
			],
			[
				"diff",
				"Set Syntax: Diff"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/benjamin/git_repos/local_picasa/filepopulator/models.py",
		"/home/benjamin/git_repos/local_picasa/filepopulator/setup.py",
		"/home/benjamin/git_repos/local_picasa/periodic/tasks",
		"/home/benjamin/git_repos/django_picasa/.env_laptop",
		"/home/benjamin/git_repos/django_picasa/taggerProject/urls.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/models.py",
		"/home/benjamin/git_repos/django_picasa/set_up_dirs.sh",
		"/home/benjamin/git_repos/django_picasa/taggerProject/settings.py",
		"/home/benjamin/git_repos/docker-compose.yml.template",
		"/home/benjamin/git_repos/local_picasa/steps",
		"/home/benjamin/git_repos/django_picasa/filepopulator/tasks/__init__.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/tasks/tasks.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/tasks/add.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/tasks.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/apps.py",
		"/home/benjamin/git_repos/django_picasa/taggerProject/__init__.py",
		"/home/benjamin/git_repos/django_picasa/docker-compose.yml",
		"/home/benjamin/git_repos/django_picasa/Dockerfile",
		"/home/benjamin/git_repos/django_picasa/.env_",
		"/home/benjamin/git_repos/photo_orienter/exif_rotate.py",
		"/home/benjamin/git_repos/photo_orienter/tester.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/jpg_extractor.py",
		"/home/benjamin/git_repos/photo_orienter/orient_db.py",
		"/home/benjamin/git_repos/photo_orienter/appendHashes.py",
		"/home/benjamin/git_repos/photo_orienter/params.xml",
		"/home/benjamin/git_repos/photo_orienter/populate.py",
		"/home/benjamin/git_repos/photo_orienter/displayer.py",
		"/home/benjamin/git_repos/django_picasa/filepopulator/tests.py",
		"/home/benjamin/git_repos/photo_orienter/dev/photoLoadThreads.py",
		"/home/benjamin/git_repos/photo_orienter/orient",
		"/home/benjamin/git_repos/photo_orienter/tmp.py",
		"/home/benjamin/pytorch_planning.txt",
		"/home/benjamin/python_planning.txt",
		"/home/benjamin/git_planning.txt",
		"/home/benjamin/git_repos/sample2/tools/phInterp2.m",
		"/home/benjamin/Desktop/HB03788.000",
		"/home/benjamin/sensor_and_resource_management.txt",
		"/home/benjamin/containers/pytorch-singularity/pytorch-gpu.def",
		"/home/benjamin/containers/pytorch-singularity/pytorch92. All",
		"/home/benjamin/git_repos/photo_orienter/dev/test_load_pics.py",
		"/home/benjamin/git_repos/photo_orienter/test_load_pics.py"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"gps_lat",
			"TAGS",
			"exifdi",
			"exifdu",
			"exif",
			"self.exifd",
			"exif",
			"datetakenvalid",
			"orientation",
			"warning",
			"logging.",
			"print",
			"generate_md5",
			"ImageFile.objects.filter",
			"pixel_hash",
			"primary_key",
			"file_hash",
			"primary_key",
			"dateAdded",
			"flash",
			"fN",
			"dateTakenVal",
			"date",
			"exposure",
			"focal",
			"self.validation",
			"print",
			"update",
			"file_hash",
			"pixel_hash",
			"not impleme",
			"file_has",
			"thumbnail",
			"validation_dir",
			"teardown",
			"print(",
			"print",
			"imagefile",
			"print",
			"self.directory",
			"directory",
			"exifDict",
			"()\n",
			"full_clean",
			"image_hash",
			"directory",
			"self.",
			"debug",
			"print",
			"getexif",
			"return",
			"5000",
			"DateTimeOrigin",
			"self.width",
			"imread",
			"print(",
			"height",
			"save",
			"filename",
			"generate_md",
			"Directory",
			"objects",
			"md5",
			"process_ne",
			"process_",
			"Thumbnails",
			"thumbnails",
			"added ",
			"create_imag",
			"val_train",
			"periodi",
			"<site>",
			"picha",
			"change",
			")\n",
			"time",
			"celer",
			"redi",
			"redis",
			"tagger",
			"images",
			"network",
			"db_django",
			"traefik_default",
			"db_djan",
			"db_dj",
			"conf",
			"rabbit",
			"rotate_lo",
			"advanceImage__",
			"threadlist",
			"delet",
			"msg_q",
			"'='",
			"imgs",
			"self.db_q",
			"file, action,",
			"self.none",
			"action_non",
			"self.none_actio",
			"none_act",
			"poss_actions",
			"mark_rotat",
			"advanceIm",
			"db_q",
			"current_img",
			"mark",
			"threadList",
			"advanceI",
			"previous_pa",
			"add_from",
			"net_action",
			"mark_proce",
			"db_q",
			"]",
			"print",
			"list_of_files",
			"next_files_q.put",
			"os.stat(",
			"join",
			"stop_even",
			".start",
			"next_file",
			"print",
			"crop_img",
			"hash_cw",
			"50)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"<project>",
			"picasa",
			"test_default",
			"MINSIZE)",
			"cudnn-9.1-linux-x64-v7.1.tgz",
			"cuda_9.1.85_387.26_linux.run",
			"cv2.waitKey(150)",
			"cv2.waitKey(50)",
			"",
			"testLoaderDisp",
			"    ",
			"i % self.num_files",
			"self.list_of_files"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "docker-compose-laptop.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2886,
						"regions":
						{
						},
						"selection":
						[
							[
								738,
								738
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 119.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Dockerfile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 643,
						"regions":
						{
						},
						"selection":
						[
							[
								524,
								524
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "requirements.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 128,
						"regions":
						{
						},
						"selection":
						[
							[
								128,
								128
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "filepopulator/apps.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 101,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "taggerProject/wsgi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 404,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "taggerProject/celery.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1616,
						"regions":
						{
						},
						"selection":
						[
							[
								1451,
								1451
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 541.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "filepopulator/tasks.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1363,
						"regions":
						{
						},
						"selection":
						[
							[
								1323,
								1323
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 789.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "taggerProject/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 261,
						"regions":
						{
						},
						"selection":
						[
							[
								195,
								195
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "filepopulator/jpg_extractor.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7482,
						"regions":
						{
						},
						"selection":
						[
							[
								305,
								305
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/benjamin/git_repos/local_picasa/picasa/settings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5007,
						"regions":
						{
						},
						"selection":
						[
							[
								5007,
								5007
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3505.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/benjamin/git_repos/local_picasa/filepopulator/tests.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11217,
						"regions":
						{
						},
						"selection":
						[
							[
								9899,
								9899
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5741.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/benjamin/git_repos/local_picasa/filepopulator/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16075,
						"regions":
						{
						},
						"selection":
						[
							[
								8404,
								8404
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4393.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/benjamin/git_repos/local_picasa/filepopulator/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5210,
						"regions":
						{
						},
						"selection":
						[
							[
								5170,
								5170
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2868.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2950,
						"regions":
						{
						},
						"selection":
						[
							[
								2408,
								2419
							]
						],
						"settings":
						{
							"auto_name": "dict_keys(['ImageWidth', 'ImageLength', 'BitsPerSa",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/benjamin/git_repos/local_picasa/testing/test_hash_collision.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2984,
						"regions":
						{
						},
						"selection":
						[
							[
								1592,
								1592
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1320.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/benjamin/Desktop/talks_2019.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 355,
						"regions":
						{
						},
						"selection":
						[
							[
								355,
								355
							]
						],
						"settings":
						{
							"auto_name": "",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 16,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51,
						"regions":
						{
						},
						"selection":
						[
							[
								51,
								51
							]
						],
						"settings":
						{
							"auto_name": "docker container run --help : this is good to know",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/home/benjamin/Desktop/birthday_invite.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 387,
						"regions":
						{
						},
						"selection":
						[
							[
								162,
								162
							]
						],
						"settings":
						{
							"auto_name": "Nathaniel Birthday Party (Best party in town)",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/benjamin/git_repos/local_picasa/periodic/tasks.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 612,
						"regions":
						{
						},
						"selection":
						[
							[
								612,
								612
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/home/benjamin/git_repos/local_picasa/steps.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3603,
						"regions":
						{
						},
						"selection":
						[
							[
								3603,
								3603
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2265.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/home/benjamin/git_repos/local_picasa/filepopulator/README.rst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1425,
						"regions":
						{
						},
						"selection":
						[
							[
								796,
								796
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/RestructuredText/reStructuredText.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 152.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/home/benjamin/git_repos/local_picasa/periodic/celery.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 559,
						"regions":
						{
						},
						"selection":
						[
							[
								559,
								559
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "django.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/git_repos/photo_orienter/orienter.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
